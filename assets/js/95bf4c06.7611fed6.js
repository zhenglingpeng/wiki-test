"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[884],{86888:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Development Environment Setup","title":"Development Environment Setup","description":"This chapter details the development environment setup process for NG4520, including local environment configuration, source code deployment, cross-compilation, kernel and device tree updates, as well as remote debugging and desktop access. It aims to help developers efficiently build a development ecosystem for embedded AI edge computing devices.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide/1-Development Environment Setup.md","sourceDirName":"1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide","slug":"/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Development Environment Setup","permalink":"/wiki-test/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Development Environment Setup","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"System  Flashing","permalink":"/wiki-test/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/System Flashing and Initialization"},"next":{"title":"Interface","permalink":"/wiki-test/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/Interface&modules configure"}}');var t=s(74848),o=s(28453);const l={},i="Development Environment Setup",d={},c=[{value:"1. Local Source Code Development Environment Setup",id:"1-local-source-code-development-environment-setup",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Source Code Deployment",id:"source-code-deployment",level:3},{value:"Cross-compilation toolchain deployment",id:"cross-compilation-toolchain-deployment",level:3},{value:"Compilation Method",id:"compilation-method",level:3},{value:"Update kernel and device tree (non-flash method)",id:"update-kernel-and-device-tree-non-flash-method",level:3},{value:"2. Remote debugging method",id:"2-remote-debugging-method",level:2},{value:"Pre-conditions",id:"pre-conditions",level:3},{value:"SSH Access",id:"ssh-access",level:3},{value:"Reference",id:"reference",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"development-environment-setup",children:"Development Environment Setup"})}),"\n",(0,t.jsxs)(n.p,{children:["This chapter details the development environment setup process for ",(0,t.jsx)(n.strong,{children:"NG4520"}),", including local environment configuration, source code deployment, cross-compilation, kernel and device tree updates, as well as remote debugging and desktop access. It aims to help developers efficiently build a development ecosystem for embedded AI edge computing devices."]}),"\n",(0,t.jsx)(n.h2,{id:"1-local-source-code-development-environment-setup",children:"1. Local Source Code Development Environment Setup"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ubuntu host (recommended 20.04/22.04 LTS, >100 GB space for cross-compilation"}),"\n",(0,t.jsx)(n.li,{children:"Install essential development tools:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo apt update \r\nsudo apt install git-core build-essential bc flex bison libssl-dev\n"})}),"\n",(0,t.jsx)(n.h3,{id:"source-code-deployment",children:"Source Code Deployment"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Download and unzip the Linux_for_Tegra source code."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"wget https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v4.0/release/Jetson_Linux_R36.4.0_aarch64.tbz2\r\ntar xf Jetson_Linux_R36.4.0_aarch64.tbz2 \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Download and unzip the file system"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"wget https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v4.0/release/Tegra_Linux_Sample-Root-Filesystem_R36.4.0_aarch64.tbz2\r\nsudo tar xpf Tegra_Linux_Sample-Root-Filesystem_R36.4.0_aarch64.tbz2 -C Linux_for_Tegra/rootfs/\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Pulling kernel source code"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source/\r\n./source_sync.sh -t jetson_36.4\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Deploying NVIDIA Tegra components\u200b\u200b"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra\r\nsudo ./apply_binaries.sh\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cross-compilation-toolchain-deployment",children:"Cross-compilation toolchain deployment"}),"\n",(0,t.jsx)(n.p,{children:"Download and unzip the cross-compilation toolchain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"wget https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v3.0/toolchain/aarch64--glibc--stable-2022.08-1.tar.bz2\r\nmkdir -p $HOME/l4t-gcc\r\ntar xf aarch64--glibc--stable-2022.08-1.tar.bz2 -C $HOME/l4t-gcc\n"})}),"\n",(0,t.jsx)(n.h3,{id:"compilation-method",children:"Compilation Method"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Environmental Variables Configuration"}),": the following environment variables need to be configured before each new terminal compilation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source\r\nexport CROSS_COMPILE=$HOME/l4t-gcc/aarch64--glibc--stable-2022.08-1/bin/aarch64-buildroot-linux-gnu-\r\nexport KERNEL_HEADERS=$PWD/kernel/kernel-jammy-src\r\nexport INSTALL_MOD_PATH=$PWD/Linux_for_Tegra/rootfs/\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Complete compilation method (with kernel, module, device tree)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./nvbuild.sh\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Separate Compilation Method"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Compile the kernel"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source\r\n./nvbuild.sh -o $PWD/kernel_output  \n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Compile Out-of-Tree Modules"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source\r\nmake modules\r\n\r\n# Install the module driver to the rootfs\r\nsudo -E make modules_install\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Compile device tree"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cd Linux_for_Tegra/source\r\nmake dtbs\n"})}),"\n",(0,t.jsx)(n.h3,{id:"update-kernel-and-device-tree-non-flash-method",children:"Update kernel and device tree (non-flash method)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Review the documentation ",(0,t.jsx)(n.code,{children:"/boot/extlinux/extlinux.conf"})," to confirm the paths to the IMAGE and DTB currently used by the device, as shown below with the location information behind LINUX and FDT."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"TIMEOUT 30\r\nDEFAULT primary\r\n\r\nMENU TITLE L4T boot options\r\n\r\nLABEL primary\r\n      MENU LABEL primary kernel\r\n      LINUX /boot/Image\r\n      FDT /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb\r\n      INITRD /boot/initrd\r\n      APPEND ${cbootargs} root=PARTUUID=756c2935-3ec5-487a-96c8-424f306ca235 rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 firmware_class.path=/etc/firmware fbcon=map:0 nospectre_bhb video=efifb:off console=tty0\r\n      OVERLAYS /boot/tegra234-p3767-camera-p3768-imx678-C.dtbo\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Make a backup of the original kernel image"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo cp /boot/Image /boot/Image.backup\r\nsudo cp /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb.backup\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Copy the compiled IMAGE and DTB via the ",(0,t.jsx)(n.code,{children:"scp"})," command to the above paths and replace them."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo cp $HOME/Image /boot/Image.backup\r\nsudo cp $HOME/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb /boot/dtb/kernel_tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb\n"})}),"\n",(0,t.jsx)(n.h2,{id:"2-remote-debugging-method",children:"2. Remote debugging method"}),"\n",(0,t.jsx)(n.h3,{id:"pre-conditions",children:"Pre-conditions"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Network Configuration"})," for the AIBOX needs to be completed with the following configuration steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Click on the top right corner of the desktop\xa0",(0,t.jsx)(n.strong,{children:"Ethernet"}),"\xa0\u2192 select\xa0",(0,t.jsx)(n.strong,{children:'"Wired Settings"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(9860).A+"",width:"616",height:"481"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"In the Network Settings pop-up window, select the current wired network connection."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click on the ",(0,t.jsx)(n.code,{children:"gear"})," icon to enter detailed settings"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Under the ",(0,t.jsx)(n.code,{children:"IPv4"})," tab, select ",(0,t.jsx)(n.code,{children:"Manual"})," configuration."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Enter the static IP address, subnet mask, and gateway. For example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Address"}),":\xa0",(0,t.jsx)(n.code,{children:"192.168.231.100"}),"\xa0"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Netmask"}),":\xa0",(0,t.jsx)(n.code,{children:"255.255.255.0"}),"\xa0"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Gateway"}),":\xa0",(0,t.jsx)(n.code,{children:"192.168.231.1"}),"\xa0"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the DNS section, enter the DNS server address, for example:\xa0",(0,t.jsx)(n.code,{children:"8.8.8.8"}),"\xa0\u548c\xa0",(0,t.jsx)(n.code,{children:"8.8.4.4"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click\xa0",(0,t.jsx)(n.code,{children:"Apply"}),"\xa0save settings."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(44911).A+"",width:"1665",height:"1122"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"When the configuration is complete, reboot the network to apply the new settings."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Network Authentication"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Open a terminal and verify that the network is working by using the following commands"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ping google.com\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ssh-access",children:"SSH Access"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On a Windows computer, press ",(0,t.jsx)(n.code,{children:"win+R"})," to open the ",(0,t.jsx)(n.code,{children:"Run"})," dialog box."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Input ",(0,t.jsx)(n.code,{children:"powershell"}),"\uff0cand then press \u200b",(0,t.jsx)(n.strong,{children:"\u200bEnter\u200b"}),"\u200b"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Connect to AIBOX via SSH using the following commands:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# Connect to AIBOX\r\nssh username@aibox-ip\r\n# Example:\r\nssh milesight@192.168.1.100\r\n\r\n# Execute remote command\r\nssh username@aibox-ip "uname -a"\r\n# Usage example:\r\nssh milesight@192.168.1.100 "uname -a"\r\n\r\n### RDP remote desktop access\r\n\r\n1. Start the JETSON terminal and install the following\uff1a\r\n\r\n```shell\r\nsudo apt update\r\nsudo apt-get install tightvncserver xrdp \r\nsudo systemctl enable xrdp  \r\nsudo systemctl start xrdp\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Open Remote Desktop Connection on Windows and enter Jetson's IP address."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Click \u201cConnect\u201d and enter your account password."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Remote_Desktop_Login",src:s(86592).A+"",width:"349",height:"431"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The following picture shows that the access is successful:\r\n",(0,t.jsx)(n.img,{alt:"Remote_Desktop",src:s(36714).A+"",width:"1897",height:"1097"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"5.Additional Notes: Resolving Application Crash Issues"}),"\n",(0,t.jsxs)(n.p,{children:["To resolve potential crash issues, modify the",(0,t.jsx)(n.code,{children:"sudo vi /etc/xrdp/startwm.sh"})," configuration file\uff0creplace the file content with the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"if test -r /etc/profile; then\r\n        . /etc/profile\r\nfi\r\n\r\nunset DBUS_SESSION_BUS_ADDRESS\r\nunset XDG_RUNTIME_DIR\r\n\r\nexec /bin/sh /usr/bin/gnome-session\n"})}),"\n",(0,t.jsx)(n.p,{children:"Save the file and restart the XRDP service with the command\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo systemctl restart xrdp.service\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.nvidia.com/jetson/archives/r36.2/DeveloperGuide/SD/Kernel/KernelCustomization.html",children:"Kernel Customization \u2014 NVIDIA Jetson Linux Developer Guide 1 documentation"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},9860:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/NG45XX_Setting-e49654253f9155f6aac7af399865196f.png"},44911:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/NG45XX_Setting_Network-1a60a90feceefc71e938c769c4bfbae8.png"},36714:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/Remote_Desktop-db54096867afd84907e6038d3b36953c.png"},86592:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/Remote_Desktop_Login-7c48ab8888b0755dca1cb9b5f9afcb81.png"},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var r=s(96540);const t={},o=r.createContext(t);function l(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);