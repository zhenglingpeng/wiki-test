"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[8233],{97618:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/ALC5640","title":"Audio Adaptation Guide (ALC5640 Example)","description":"This guide uses the Realtek ALC5640 audio codec as an example describe the driver adaptation, device tree configuration, kernel configuration, system integration, and common testing methods on the NG4500-CB01 platform.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide/1-Driver Installation and Updates/4-ALC5640.md","sourceDirName":"1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide/1-Driver Installation and Updates","slug":"/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/ALC5640","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/ALC5640","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OV5647 Camera Module Adaptation Guide","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/ov5647"},"next":{"title":"4G/5G","permalink":"/wiki-documents/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Driver Installation and Updates/2-4G_5G"}}');var t=r(74848),s=r(28453);const a={},c="Audio Adaptation Guide (ALC5640 Example)",o={},d=[{value:"Terms and Explanations",id:"terms-and-explanations",level:2},{value:"ALC5640 Driver Configuration Process",id:"alc5640-driver-configuration-process",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Device Tree Configuration",id:"device-tree-configuration",level:3},{value:"Kernel Configuration",id:"kernel-configuration",level:3},{value:"System Integration &amp; Driver Loading",id:"system-integration--driver-loading",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"audio-adaptation-guide-alc5640-example",children:"Audio Adaptation Guide (ALC5640 Example)"})}),"\n",(0,t.jsx)(n.p,{children:"This guide uses the Realtek ALC5640 audio codec as an example describe the driver adaptation, device tree configuration, kernel configuration, system integration, and common testing methods on the NG4500-CB01 platform."}),"\n",(0,t.jsx)(n.h2,{id:"terms-and-explanations",children:"Terms and Explanations"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Terms"}),(0,t.jsx)(n.th,{children:"Explanations"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"I2S"}),(0,t.jsx)(n.td,{children:"Serial interface for digital audio transmission between ICs, commonly used to connect external audio devices."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DSPK"}),(0,t.jsx)(n.td,{children:"Digital speaker interface for connecting and controlling digital speakers; supports digital speaker output."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DMIC"}),(0,t.jsx)(n.td,{children:"Digital microphone controller for managing and processing digital microphone input\uff0csupports various digital mic types."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mixer"}),(0,t.jsx)(n.td,{children:"Mixer module that combines multiple audio input signals into a single output."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AMX"}),(0,t.jsx)(n.td,{children:"Audio multiplexer that merges multiple audio signals into a single output channel."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ADX"}),(0,t.jsx)(n.td,{children:"Audio demultiplexer that splits a single audio signal into multiple independent channels."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SFC"}),(0,t.jsx)(n.td,{children:"Sample rate converter for transforming audio signals between different sampling rates to improve system compatibility."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"MVC"}),(0,t.jsx)(n.td,{children:"Master volume controller for unified adjustment of audio channel output volume."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ADMA"}),(0,t.jsx)(n.td,{children:"Audio-specific Direct Memory Access controller for efficient audio data transfer, supporting up to 32 audio channels."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ADMAIF"}),(0,t.jsx)(n.td,{children:"AHUB DMA interface enabling data exchange between audio hardware modules and system memory; supports 20 TX/RX channels, optimized for Jetson."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"XBAR"}),(0,t.jsx)(n.td,{children:"Audio crossbar (router) for dynamically routing audio signals between multiple sources and destinations; the core of audio path configuration."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"APE"}),(0,t.jsx)(n.td,{children:"Dedicated audio processing engine on the Jetson platform, featuring low power consumption and high performance for tasks like audio decoding."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AHUB"}),(0,t.jsx)(n.td,{children:"Core component of APE that integrates multiple NVIDIA proprietary hardware modules for audio routing, processing, and inter-module communication."})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Software Driver Architecture"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ALSA ASoC"}),"\uff08Audio System on Chip\uff09 is the mainline Linux audio subsystem\uff0cprovide better ALSA support for embedded system on chip procesors.\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["ASoC system architecture consists of three core driver components\uff1a","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Codec Driver"}),"\uff1aManages ALC5640 registers and audio signal paths"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Platform Driver"}),"\uff1aHandles Tegra DMA and I2S interface operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Machine Driver"}),"\uff1aBinds hardware components and defines audio routing"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"The NVIDIA Jetson platform integrates a proprietary audio architecture featuring the APE engine and AHUB module, supporting XBAR dynamic routing and multi-channel DMA via ADMAIF."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:r(35906).A+"",width:"1017",height:"612"})}),"\n",(0,t.jsx)(n.h2,{id:"alc5640-driver-configuration-process",children:"ALC5640 Driver Configuration Process"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Confirm the I2C address of the ALC5640 codec chip."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Refer to the datasheet to determine the ALC5640 operating mode (Master/Slave) and required clock signals (e.g., MCLK, BCLK, LRCK)."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:r(51615).A+"",width:"1702",height:"302"})}),"\n",(0,t.jsx)(n.h3,{id:"device-tree-configuration",children:"Device Tree Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Locate or create the device tree file in ",(0,t.jsx)(n.code,{children:"Linux_for_Tegra/source/hardware/nvidia/t23x/nv-public/nv-platform/tegra234-NG45XX-p3768-0000+p3767-0000-common.dts"}),"\uff0c configure the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"I2C Node \u2013 Add Codec Configuration as shown below"}),"\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'i2c@3160000 {\r\n    status = "okay";\r\n\r\n    rt5640: audio-codec@1c {\r\n        status = "okay";\r\n        compatible = "realtek,rt5640";\r\n        reg = <0x1c>;\r\n        interrupt-parent = <&gpio>;\r\n        interrupts = <TEGRA234_MAIN_GPIO(P, 6) 0>;\r\n        clocks = <&bpmp TEGRA234_CLK_AUD_MCLK>;\r\n        clock-names = "mclk";\r\n\r\n        realtek,dmic1-data-pin = <RT5640_DMIC1_DATA_PIN_NONE>;\r\n        realtek,dmic2-data-pin = <RT5640_DMIC2_DATA_PIN_NONE>;\r\n        realtek,jack-detect-source = <RT5640_JD_SRC_HDA_HEADER>;\r\n\r\n        sound-name-prefix = "CVB-RT";\r\n        sel_jd_source = <3>;\r\n\r\n        port {\r\n            rt5640_ep: endpoint {\r\n                remote-endpoint = <&i2s4_dap>;\r\n                mclk-fs = <256>;\r\n            };\r\n        };\r\n    };\r\n};\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"I2S Node"}),"\uff0cEnable AHUB, I2S Controller, and Connect Codec to ",(0,t.jsx)(n.code,{children:"r&t5640_ep codec"}),"chip as shown below\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'aconnect@2900000 {\r\n    status = "okay";\r\n    ahub@2900800 {\r\n        status = "okay";\r\n        i2s@2901300 {\r\n            status = "okay";\r\n            ports {\r\n                port@1 {\r\n                    endpoint {\r\n                        dai-format = "i2s";\r\n                        remote-endpoint = <&rt5640_ep>;\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Sound card node definition and routing configuration"})," as shown below \uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'sound {\r\n        status = "okay";\r\n        compatible = "nvidia,tegra186-audio-graph-card",\r\n                "nvidia,tegra186-ape";\r\n        nvidia-audio-card,mclk-fs = <256>;\r\n        label = "NVIDIA Jetson Orin Nano APE";\r\n\r\n        nvidia-audio-card,widgets =\r\n            "Headphone", "CVB-RT Headphone Jack",\r\n            "Microphone", "CVB-RT Mic Jack",\r\n            "Speaker", "CVB-RT Int Spk",\r\n            "Microphone", "CVB-RT Int Mic";\r\n\r\n        nvidia-audio-card,routing =\r\n            "CVB-RT Headphone Jack",     "CVB-RT HPOL",\r\n            "CVB-RT Headphone Jack",     "CVB-RT HPOR",\r\n            "CVB-RT Headphone Jack",     "CVB-RT LOUTL",\r\n            "CVB-RT Headphone Jack",     "CVB-RT LOUTR",\r\n            "CVB-RT IN1P",               "CVB-RT Mic Jack",\r\n            "CVB-RT IN2P",               "CVB-RT Mic Jack",\r\n            "CVB-RT IN3P",               "CVB-RT Mic Jack",\r\n            "CVB-RT Int Spk",            "CVB-RT SPOLP",\r\n            "CVB-RT Int Spk",            "CVB-RT SPORP",\r\n            "CVB-RT DMIC1",              "CVB-RT Int Mic",\r\n            "CVB-RT DMIC2",              "CVB-RT Int Mic";\r\n};\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"DAI Link"})," , linking the CPU ADMA intermediate xbar to the codec alc5640"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'nvidia-audio-card,dai-link@79 {\r\n    link-name = "rt5640-playback";\r\n\r\n    codec {\r\n        sound-dai = <&rt5640 0>;\r\n        prefix = "CVB-RT";\r\n    };\r\n};\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"kernel-configuration",children:"Kernel Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Edit the following file",(0,t.jsx)(n.code,{children:"Linux_for_Tegra/source/kernel/kernel-jammy-src/arch/arm64/configs/defconfig"})," add the following commands."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"CONFIG_SND_SOC_ALC5640=m\n"})}),"\n",(0,t.jsx)(n.h3,{id:"system-integration--driver-loading",children:"System Integration & Driver Loading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Boot the target device (AIBOX)\uff0cTransfer the compiled DTB and kernel module via ",(0,t.jsx)(n.code,{children:"scp"}),"from your host machine"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd Linux_for_Tegra/source\r\n\r\nscp ./kernel-devicetree/generic-dts/dtbs/tegra234-NG45XX-p3768-0000+p3767-0003-nv-super.dtb milesight@192.168.60.3:/home/milesight\r\nscp ./kernel/kernel-jammy-src/sound/soc/codecs/snd-soc-rt5640.ko milesight@192.168.60.3:/home/milesight\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["copy the",(0,t.jsx)(n.code,{children:" snd-soc-rt5640.ko"})," to the kernel module path and run  ",(0,t.jsx)(n.code,{children:"depmod"}),"  to load driver."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo cp ./snd-soc-rt5640.ko /lib/modules/5.15.148-tegra/kernel/sound/soc/codecs/snd-soc-rt5640.ko\r\n\r\nsudo depmod\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Finally, reboot the device to apply the configuration."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Headphone / Internal Speaker Playback Test"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'amixer -c APE cset name="I2S4 Mux" "ADMAIF1"\r\n\r\namixer -c APE cset name="CVB-RT DAC MIXL INF1 Switch" "on"\r\namixer -c APE cset name="CVB-RT DAC MIXR INF1 Switch" "on"\r\namixer -c APE cset name="CVB-RT Stereo DAC MIXL DAC L1 Switch" "on"\r\namixer -c APE cset name="CVB-RT Stereo DAC MIXR DAC R1 Switch" "on"\r\n\r\namixer -c APE cset name="CVB-RT HPO MIX DAC1 Switch"  "on"\r\namixer -c APE cset name="CVB-RT HP L Playback Switch"  "on"\r\namixer -c APE cset name="CVB-RT HP R Playback Switch"  "on" \r\namixer -c APE cset name="CVB-RT HP Playback Volume"  "31,31"\r\namixer -c APE cset name="CVB-RT DAC1 Playback Volume"  "175,175" \r\n\r\n#Testing\r\naplay  xxx.wav\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Headset Microphone Recording Test"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'amixer -c APE cset name="I2S4 Mux" "ADMAIF1"\r\namixer -c APE cset name="CVB-RT IN1 Boost" 8\r\namixer -c APE cset name="CVB-RT RECMIXL BST1 Switch" "on"\r\namixer -c APE cset name="CVB-RT RECMIXR BST1 Switch" "on"\r\namixer -c APE cset name="CVB-RT Stereo ADC1 Mux" "ADC"\r\namixer -c APE cset name="CVB-RT Stereo ADC MIXL ADC1 Switch" "on"\r\namixer -c APE cset name="CVB-RT Stereo ADC MIXR ADC1 Switch" "on"\r\namixer -c APE cset name=\'CVB-RT ADC Capture Switch\' on\r\n\r\n#Record and playback\r\narecord -Dhw:APE,1 -c 2 -r 44100 -f S16_LE -d 5 xxx.wav\r\naplay  xxx.wav\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"External Speaker Playback Test"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'amixer -c APE cset name="I2S4 Mux" "ADMAIF1"\r\n\r\namixer -c APE cset name="CVB-RT Speaker Channel Switch" on\r\namixer -c APE cset name="CVB-RT Speaker L Playback Switch" on\r\namixer -c APE cset name="CVB-RT Speaker R Playback Switch" on\r\n\r\namixer -c APE cset name="CVB-RT Speaker Playback Volume" 50%\r\namixer -c APE cset name="CVB-RT DAC1 Playback Volume" "175,175"  \r\n\r\namixer -c APE cset name="CVB-RT DAC MIXL INF1 Switch" on\r\namixer -c APE cset name="CVB-RT DAC MIXR INF1 Switch" on\r\namixer -c APE cset name="CVB-RT SPK MIXL DAC L1 Switch" on\r\namixer -c APE cset name="CVB-RT SPK MIXR DAC R1 Switch" on\r\n\r\namixer -c APE cset name="CVB-RT SPOL MIX SPKVOL L Switch" on\r\namixer -c APE cset name="CVB-RT SPOR MIX SPKVOL R Switch" on\r\namixer -c APE cset name="CVB-RT OUT MIXL SPK MIXL Switch" on\r\namixer -c APE cset name="CVB-RT OUT MIXR SPK MIXR Switch" on\r\n\r\n#Testing\r\naplay  xxx.wav\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"External Microphone Recording Test"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'amixer -c APE cset name="I2S4 Mux" "ADMAIF1"\r\n\r\namixer -c APE cset name="CVB-RT IN2 Boost" 8\r\namixer -c APE cset name="CVB-RT IN3 Boost" 8\r\namixer -c APE cset name="CVB-RT RECMIXL BST2 Switch" "on"\r\namixer -c APE cset name="CVB-RT RECMIXR BST2 Switch" "on"\r\namixer -c APE cset name="CVB-RT RECMIXL BST3 Switch" "on"\r\namixer -c APE cset name="CVB-RT RECMIXR BST3 Switch" "on"\r\namixer -c APE cset name=\'CVB-RT ADC Capture Switch\' on\r\n\r\n#Testing: Recording and Playback\r\narecord -Dhw:APE,1 -c 2 -r 44100 -f S16_LE -d 5 xxx.wav\r\naplay  xxx.wav\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"No audio output"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Verify MCLK/BCLK are present and stable"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Check the I2S interface"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Check the amixer routing settings"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Recording noise"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure correct sampling rate"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.nvidia.com/jetson/archives/r36.4.3/DeveloperGuide/SD/Communications/AudioSetupAndDevelopment.html#",children:"Audio Setup and Development \u2014 NVIDIA Jetson Linux Developer Guide"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"For  adapting other audio codecs, the procedure is largely similar. Key focus should be on driver support and device tree configuration."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},51615:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/EG45XX_ALC5640_CLK-f51faa48ce8963e17bbe277fea3f44ad.png"},35906:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/EG45XX_Audio_Framework-af009466400f4c4f30b485cba4877620.png"},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(96540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);