"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[778],{91025:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Software Frameworks and Tools/deepstream","title":"DeepStream","description":"---","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide/3-Software Frameworks and Tools/3-deepstream.md","sourceDirName":"1-NeoEdge NG4500 Series/2-NG4500-CB01 Development Board/2-Software Guide/3-Software Frameworks and Tools","slug":"/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Software Frameworks and Tools/deepstream","permalink":"/wiki-test/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Software Frameworks and Tools/deepstream","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"n8n","permalink":"/wiki-test/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Software Frameworks and Tools/n8n"},"next":{"title":"jtop","permalink":"/wiki-test/docs/NeoEdge NG4500 Series/NG4500-CB01 Development Board/Software Guide/Software Frameworks and Tools/jtop"}}');var i=s(74848),a=s(28453);const t={},l="DeepStream",d={},o=[{value:"1. Overview",id:"1-overview",level:2},{value:"2. System Requirements",id:"2-system-requirements",level:2},{value:"Hardware",id:"hardware",level:3},{value:"Software",id:"software",level:3},{value:"3. Installation DeepStream",id:"3-installation-deepstream",level:2},{value:"Method 1: Installation via SDK Manager",id:"method-1-installation-via-sdk-manager",level:3},{value:"Method 2: Using DeepStream Tar Package",id:"method-2-using-deepstream-tar-package",level:3},{value:"Method 3: Using DeepStream Debian Package",id:"method-3-using-deepstream-debian-package",level:3},{value:"Method 4: Using DeepStream Docker",id:"method-4-using-deepstream-docker",level:3},{value:"Verification",id:"verification",level:3},{value:"4. Running Examples",id:"4-running-examples",level:2},{value:"Step 1: Run the Default Reference App",id:"step-1-run-the-default-reference-app",level:3},{value:"deepstream_app_5x8",id:"deepstream_app_5x8",level:2},{value:"Step 2: Use USB or CSI Camera",id:"step-2-use-usb-or-csi-camera",level:3},{value:"Step 3\uff1aUse RTSP Stream as Input",id:"step-3use-rtsp-stream-as-input",level:3},{value:"Step 4: Run Sample Application",id:"step-4-run-sample-application",level:3},{value:"5. Integrating a Custom Model",id:"5-integrating-a-custom-model",level:2},{value:"Step 1: Convert the Model to TensorRT Engine",id:"step-1-convert-the-model-to-tensorrt-engine",level:3},{value:"Step 2: Update DeepStream Configuration File",id:"step-2-update-deepstream-configuration-file",level:3},{value:"6. Additional Examples",id:"6-additional-examples",level:2},{value:"7. Troubleshooting",id:"7-troubleshooting",level:2},{value:"8. Appendix",id:"8-appendix",level:2},{value:"Key Paths",id:"key-paths",level:3},{value:"References",id:"references",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deepstream",children:"DeepStream"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["This guide provides instructions for installing and running the NVIDIA DeepStream SDK on ",(0,i.jsx)(n.strong,{children:"Jetson Orin"})," devices.",(0,i.jsx)(n.strong,{children:"DeepStream SDK"})," is a comprehensive streaming analytics toolkit built on GStreamer, designed for real-time AI-based multi-sensor processing including video, audio, and image analytics. It enables GPU-accelerated video analysis pipelines and is highly optimized for the CUDA/NvMedia architecture on Jetson platforms."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-overview",children:"1. Overview"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Real-time video analytics SDK provided by NVIDIA"}),"\n",(0,i.jsx)(n.li,{children:"Optimized with TensorRT and CUDA for maximum performance"}),"\n",(0,i.jsx)(n.li,{children:"Supports multi-stream AI inference and object tracking"}),"\n",(0,i.jsx)(n.li,{children:"Input sources include RTSP, USB/CSI cameras, and local video files"}),"\n",(0,i.jsx)(n.li,{children:"Built-in support for object detection, classification, and tracking"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This guide covers\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Installation methods (via ",(0,i.jsx)(n.code,{children:".deb"})," packages and Docker)"]}),"\n",(0,i.jsx)(n.li,{children:"Running sample DeepStream pipelines"}),"\n",(0,i.jsx)(n.li,{children:"Integrating custom models (e.g. YOLO, SSD, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Docker-based deployment using jetson-containers"}),"\n",(0,i.jsx)(n.li,{children:"Troubleshooting and optimization tips"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"overview",src:s(45100).A+"",width:"914",height:"485"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-system-requirements",children:"2. System Requirements"}),"\n",(0,i.jsx)(n.h3,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Model"}),(0,i.jsx)(n.th,{children:"Minimum Requirement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Device"}),(0,i.jsx)(n.td,{children:"Jetson Orin Nano / NX"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory"}),(0,i.jsx)(n.td,{children:"\u2265 8GB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Storage"}),(0,i.jsx)(n.td,{children:"\u2265 10GB"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"software",children:"Software"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JetPack 6.1 GA or later (L4T \u2265 R36.4)"}),"\n",(0,i.jsx)(n.li,{children:"Ubuntu 20.04 / 22.04"}),"\n",(0,i.jsx)(n.li,{children:"CUDA\u3001TensorRT and cuDNN\uff08included with JetPack \u4e2d\uff09"}),"\n",(0,i.jsx)(n.li,{children:"Docker(optional, for containerized deployment)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-installation-deepstream",children:"3. Installation DeepStream"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"glib Migration\uff1a\r\nTo migrate to a newer version of glib (e.g., 2.76.6), please follow these steps:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo pip3 install meson\r\nsudo pip3 install ninja\n"})}),"\n",(0,i.jsx)(n.p,{children:"Build and Install glib\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/GNOME/glib.git\r\ncd glib\r\ngit checkout <glib-version-branch>\r\n# e.g. 2.76.6\r\nmeson build --prefix=/usr\r\nninja -C build/\r\ncd build/\r\nsudo ninja install\n"})}),"\n",(0,i.jsx)(n.p,{children:"Confirm GLib Version\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pkg-config --modversion glib-2.0\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install Required Libraries\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update\r\nsudo apt install -y \\\r\n  libssl1.1 \\\r\n  libgstreamer1.0-0 \\\r\n  gstreamer1.0-tools \\\r\n  gstreamer1.0-plugins-good \\\r\n  gstreamer1.0-plugins-bad \\\r\n  gstreamer1.0-plugins-ugly \\\r\n  gstreamer1.0-libav \\\r\n  libgstrtspserver-1.0-0 \\\r\n  libjansson4 \\\r\n  libyaml-cpp-dev\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install librdkafka (for Kafka Protocol Adapter)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Clone the librdkafka repository from GitHub\uff1a"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/confluentinc/librdkafka.git\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Configure and build the library:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd librdkafka\r\ngit checkout tags/v2.2.0\r\n./configure --enable-ssl\r\nmake\r\nsudo make install\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Copy the compiled libraries to the DeepStream directory:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo mkdir -p /opt/nvidia/deepstream/deepstream/lib\r\nsudo cp /usr/local/lib/librdkafka* /opt/nvidia/deepstream/deepstream/lib\r\nsudo ldconfig\n"})}),"\n",(0,i.jsx)(n.h3,{id:"method-1-installation-via-sdk-manager",children:"Method 1: Installation via SDK Manager"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Download and install SDK Manager from ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/nvidia-sdk-manager",children:"NVIDIA\u2019s official website"})," ."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Connect the Jetson Orin device via USB-C to  PC."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Launch SDK Manager\uff1arunning ",(0,i.jsx)(n.code,{children:"sdkmanager"})," in the host and log in with your NVIDIA Developer account."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Select hardware and JetPack version in SDK Manager."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'Check DeepStream SDK in "Additional SDKs".'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Follow on-screen instructions to complete installation."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"method-2-using-deepstream-tar-package",children:"Method 2: Using DeepStream Tar Package"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Download the DeepStream SDK tar from the ",(0,i.jsx)(n.a,{href:"https://catalog.ngc.nvidia.com/orgs/nvidia/resources/deepstream",children:"NVIDIA DeepStream Download Page"}),"\uff08Example ",(0,i.jsx)(n.code,{children:"deepstream_sdk_v7.1.0_jetson.tbz2"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Extract and install\uff1a"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo tar -xvf deepstream_sdk_v7.1.0_jetson.tbz2 -C /\r\ncd /opt/nvidia/deepstream/deepstream-7.1\r\nsudo ./install.sh\r\nsudo ldconfig\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"method-3-using-deepstream-debian-package",children:"Method 3: Using DeepStream Debian Package"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Download the Debian Package from ",(0,i.jsx)(n.a,{href:"https://catalog.ngc.nvidia.com/orgs/nvidia/resources/deepstream",children:"DeepStream Debian Download page"}),"\uff08Example:",(0,i.jsx)(n.code,{children:"deepstream-7.1_7.1.0-1_arm64.deb"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install the package:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install ./deepstream-7.1_7.1.0-1_arm64.deb\n"})}),"\n",(0,i.jsx)(n.h3,{id:"method-4-using-deepstream-docker",children:"Method 4: Using DeepStream Docker"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install Docker and NVIDIA Container Toolkit."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Pull DeepStream container\uff1a"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull nvcr.io/nvidia/deepstream-l4t:6.1-samples\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Run DeepStream container\uff1a"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -it --rm --runtime=nvidia \\\r\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\r\n  -e DISPLAY=$DISPLAY \\\r\n  nvcr.io/nvidia/deepstream-l4t:6.1-samples\n"})}),"\n",(0,i.jsxs)(n.p,{children:["(Optional) Use the jetson-containers community projec ",(0,i.jsx)(n.a,{href:"https://github.com/dusty-nv/jetson-containers",children:"jetson-containers"}),"\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"jetson-containers run dusty-nv/deepstream\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"verification",children:"Verification"}),"\n",(0,i.jsx)(n.p,{children:"Check Version\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deepstream-app --version-all\n"})}),"\n",(0,i.jsx)(n.p,{children:"Expected Output\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:" deepstream-app version 7.1.0\r\n DeepStreamSDK 7.1.0\r\n CUDA Driver Version: 12.6\r\n CUDA Runtime Version: 12.6\r\n TensorRT Version: 10.3\r\n cuDNN Version: 9.0\r\n libNVWarp360 Version: 2.0.1d3\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-running-examples",children:"4. Running Examples"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-run-the-default-reference-app",children:"Step 1: Run the Default Reference App"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Navigate to the built-in sample configuration directory:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /opt/nvidia/deepstream/deepstream-7.1/samples/configs/deepstream-app\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Run the reference application:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# deepstream-app -c <path_to_config_file>\r\ndeepstream-app -c source30_1080p_dec_infer-resnet_tiled_display_int8.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"This command launches a tiled display showing real-time object detection results from multiple video streams:"}),"\n",(0,i.jsx)(n.h2,{id:"deepstream_app_5x8",children:(0,i.jsx)(n.img,{alt:"deepstream_app_5x8",src:s(18611).A+"",width:"1803",height:"1019"})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-use-usb-or-csi-camera",children:"Step 2: Use USB or CSI Camera"}),"\n",(0,i.jsxs)(n.p,{children:["Modify the",(0,i.jsx)(n.code,{children:"[source0]"}),"section of the configuration file to enable camera input:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"[source0]\r\nenable=1\r\ntype=1\r\ncamera-width=1280\r\ncamera-height=720\r\ncamera-fps-n=30\n"})}),"\n",(0,i.jsx)(n.p,{children:"Run the app with your updated config:\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deepstream-app -c <your_camera_config>.txt\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83c\udfa5 For DeepStream configuration\uff1aUSB camera uses",(0,i.jsx)(n.code,{children:"type=1"}),"\uff0cCSI camera uses GStreamer source element ",(0,i.jsx)(n.code,{children:"nvarguscamerasrc"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-3use-rtsp-stream-as-input",children:"Step 3\uff1aUse RTSP Stream as Input"}),"\n",(0,i.jsx)(n.p,{children:"To connect to an IP camera stream, update the source block\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"[source0]\r\nenable=1\r\ntype=4\r\nuri=rtsp://<your-camera-stream>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-4-run-sample-application",children:"Step 4: Run Sample Application"}),"\n",(0,i.jsx)(n.p,{children:"Navigate to the sample app directory\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /opt/nvidia/deepstream/deepstream-7.1/sources/apps/sample_apps/deepstream-test1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Compile the source code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo make CUDA_VER=12.6\n"})}),"\n",(0,i.jsx)(n.p,{children:"Run the application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./deepstream-test1-app dstest1_config.yml\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"deepstream_od",src:s(61361).A+"",width:"1920",height:"1080"})}),"\n",(0,i.jsx)(n.p,{children:"For more sample source code, refer to:  /opt/nvidia/deepstream/deepstream/sources"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-integrating-a-custom-model",children:"5. Integrating a Custom Model"}),"\n",(0,i.jsx)(n.p,{children:"DeepStream supports custom model integration using TensorRT or ONNX formats."}),"\n",(0,i.jsx)(n.h3,{id:"step-1-convert-the-model-to-tensorrt-engine",children:"Step 1: Convert the Model to TensorRT Engine"}),"\n",(0,i.jsxs)(n.p,{children:["Use",(0,i.jsx)(n.code,{children:"trtexec"})," or ",(0,i.jsx)(n.code,{children:"tao-converter"})," to convert your ONNX model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"trtexec --onnx=model.onnx --saveEngine=model.engine\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-update-deepstream-configuration-file",children:"Step 2: Update DeepStream Configuration File"}),"\n",(0,i.jsx)(n.p,{children:"Edit the model configuration section:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"[primary-gie]\r\nenable=1\r\nmodel-engine-file=model.engine\r\nnetwork-type=0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more DeepStream + TAO Toolkit integration examples, refer to: ",(0,i.jsx)(n.a,{href:"https://github.com/NVIDIA-AI-IOT/deepstream_tao_apps",children:"https://github.com/NVIDIA-AI-IOT/deepstream_tao_apps"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-additional-examples",children:"6. Additional Examples"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/NVIDIA-AI-IOT/deepstream_python_apps/tree/master",children:"deepstream_python_apps"}),"\r\n",(0,i.jsx)(n.img,{alt:"deepstream_python",src:s(66078).A+"",width:"1920",height:"1440"})]}),"\n",(0,i.jsx)(n.h2,{id:"7-troubleshooting",children:"7. Troubleshooting"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Issue"}),(0,i.jsx)(n.th,{children:"Solution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"No image display in Docker"}),(0,i.jsxs)(n.td,{children:["Mount the X11 socket and set the ",(0,i.jsx)(n.code,{children:"DISPLAY"})," environment variable"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Low frame rate"}),(0,i.jsx)(n.td,{children:"Use INT8 engine format or reduce input video resolution"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"USB camera not detected"}),(0,i.jsxs)(n.td,{children:["Run ",(0,i.jsx)(n.code,{children:"v4l2-ctl --list-devices"})," to verify the device"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GStreamer errors"}),(0,i.jsx)(n.td,{children:"Ensure all required plugins are installed; reflash JetPack if necessary"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"RTSP stream lag or frame drops"}),(0,i.jsxs)(n.td,{children:["Set ",(0,i.jsx)(n.code,{children:"drop-frame-interval=0"})," or ",(0,i.jsx)(n.code,{children:"latency=200"})]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-appendix",children:"8. Appendix"}),"\n",(0,i.jsx)(n.h3,{id:"key-paths",children:"Key Paths"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Purpose"}),(0,i.jsx)(n.th,{children:"Path"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Sample config files"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/opt/nvidia/deepstream/deepstream/samples/configs/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Model engine files"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/opt/nvidia/deepstream/deepstream/models/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Log directory"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/opt/nvidia/deepstream/logs/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DeepStream CLI tool"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/usr/bin/deepstream-app"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/deepstream-sdk",children:"DeepStream Official Page"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://catalog.ngc.nvidia.com/orgs/nvidia/containers/deepstream",children:"NGC Docker Images - DeepStream"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/dusty-nv/jetson-containers",children:"GitHub - dusty-nv/jetson-containers"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},45100:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/NG45XX_deepstream_overview-6ea531f5644535084d5a6900f48488a6.png"},18611:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/deepstream_app_1-452be66fd747ab1c5c98c6a2cf08a0de.png"},61361:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/deepstream_od-6a67e1b73fe98147cd8553ff37726f2e.png"},66078:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/deepstream_python-2b9a3cda9ff5d02256f3096fc57b478d.png"},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(96540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);